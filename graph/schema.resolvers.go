package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"sms-campaign-manager/graph/model"
)

// CreateCampaign is the resolver for the createCampaign field.
func (r *mutationResolver) CreateCampaign(ctx context.Context, input model.NewCampaign) (*model.Campaign, error) {
	campaign, err := r.DB.CreateCampaign(&input)
	return campaign, err
}

// CreateSegment is the resolver for the createSegment field.
func (r *mutationResolver) CreateSegment(ctx context.Context, input model.NewSegment) (*model.Segment, error) {
	segment, err := r.DB.CreateSegment(&input)
	return segment, err
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input model.NewTemplate) (*model.Template, error) {
	template, err := r.DB.CreateTemplate(&input)
	return template, err
}

// Campaigns is the resolver for the campaigns field.
func (r *queryResolver) Campaigns(ctx context.Context) ([]*model.Campaign, error) {
	campaigns, err := r.DB.GetCampaigns()
	return campaigns, err
}

// Segments is the resolver for the segments field.
func (r *queryResolver) Segments(ctx context.Context) ([]*model.Segment, error) {
	segments, err := r.DB.GetSegments()
	return segments, err
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context) ([]*model.Template, error) {
	templates, err := r.DB.GetTemplates()
	return templates, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
